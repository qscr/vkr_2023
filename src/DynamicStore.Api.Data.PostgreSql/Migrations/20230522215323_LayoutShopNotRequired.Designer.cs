// <auto-generated />
using System;
using DynamicStore.Api.Data.PostgreSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DynamicStore.Api.Data.PostgreSql.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20230522215323_LayoutShopNotRequired")]
    partial class LayoutShopNotRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<string>("CarInfo")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("car_info");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("CylindersCount")
                        .HasColumnType("integer")
                        .HasColumnName("cylinders_count");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cars");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_cars_user_id");

                    b.ToTable("cars", "public");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code")
                        .HasComment("Код категории");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("Описание категории");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование категории");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "public");

                    b.HasComment("Категории товаров");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ContentType")
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.ToTable("files", "public");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Layout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("active_from")
                        .HasComment("Дата активации дизайна");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LayoutDesign")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("layout_design")
                        .HasComment("Дизайн страницы");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_id")
                        .HasComment("Ид магазина");

                    b.HasKey("Id")
                        .HasName("pk_layouts");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_layouts_shop_id");

                    b.ToTable("layouts", "public");

                    b.HasComment("Дизайны страничек магазинов");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsPayed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_payed")
                        .HasComment("Оплачен ли заказ");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity")
                        .HasComment("Количество товаров");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price")
                        .HasComment("Общая стоимость");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasComment("Пользователь");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_orders_user_id");

                    b.ToTable("orders", "public");

                    b.HasComment("Заказы");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id")
                        .HasComment("Ид заказа");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id")
                        .HasComment("Ид товара");

                    b.HasKey("Id")
                        .HasName("pk_order_products");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_products_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_products_product_id");

                    b.ToTable("order_products", "public");

                    b.HasComment("Товары из заказов");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id")
                        .HasComment("Ид категории");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("Описание товара");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование товара");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price")
                        .HasComment("Цена товара");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_id")
                        .HasComment("Ид магазина");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_products_shop_id");

                    b.ToTable("products", "public");

                    b.HasComment("Товары");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование магазина");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id")
                        .HasComment("Ид владельца");

                    b.HasKey("Id")
                        .HasName("pk_shops");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_shops_owner_id");

                    b.ToTable("shops", "public");

                    b.HasComment("Магазины");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasComment("Email");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash")
                        .HasComment("Хэш пароля");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_id")
                        .HasComment("Ид магазина");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ShopId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_shop_id");

                    b.ToTable("users", "public");

                    b.HasComment("Пользователи");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Car", b =>
                {
                    b.HasOne("DynamicStore.Api.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_cars_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Layout", b =>
                {
                    b.HasOne("DynamicStore.Api.Core.Entities.Shop", "Shop")
                        .WithMany("Layouts")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_layouts_shops_shop_id");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Order", b =>
                {
                    b.HasOne("DynamicStore.Api.Core.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orders_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.OrderProduct", b =>
                {
                    b.HasOne("DynamicStore.Api.Core.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_orders_order_id");

                    b.HasOne("DynamicStore.Api.Core.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_products_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Product", b =>
                {
                    b.HasOne("DynamicStore.Api.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_category_category_id");

                    b.HasOne("DynamicStore.Api.Core.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_products_shops_shop_id");

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Shop", b =>
                {
                    b.HasOne("DynamicStore.Api.Core.Entities.User", "Owner")
                        .WithOne()
                        .HasForeignKey("DynamicStore.Api.Core.Entities.Shop", "OwnerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_shops_users_owner_id1");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.User", b =>
                {
                    b.HasOne("DynamicStore.Api.Core.Entities.Shop", "Shop")
                        .WithOne()
                        .HasForeignKey("DynamicStore.Api.Core.Entities.User", "ShopId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_users_shops_shop_id");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.Shop", b =>
                {
                    b.Navigation("Layouts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DynamicStore.Api.Core.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
